<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>蔡凯的博客</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <id>http://localhost:4000</id>
 <updated>2017-03-03T12:02:48+08:00</updated>
 <author>
   <name>caikai</name>
   <uri></uri>
   <email>ck19920702@gmail.com</email>
 </author>

 

 <entry>
   <title>发布项目到Github</title>
   <link href="http://localhost:4000/Jekyll-%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub"/>
   <id>http://localhost:4000/Jekyll-发布项目到GitHub</id>
   <updated>2017-03-03T10:00:00+08:00</updated>
   <content type="html">&lt;h2 id=&quot;说明&quot;&gt;说明&lt;/h2&gt; &lt;p&gt;GitHub上有许多优秀的开源代码。我们也可以讲自己的代码托管在Github上，现在就开始讲解一下如何将本地的代码提交到GitHub。现在已Android studio项目为例（其他项目都是一样）&lt;/p&gt; &lt;h3 id=&quot;第一步&quot;&gt;第一步&lt;/h3&gt; &lt;p&gt;先做好准备工作： 首先，你需要有一个GitHub帐号， https://github.com ，如何注册这个就不用说了。 然后安装Git。在https://git-scm.com 下载对应的系统版本就好了。 输入&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git --version &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;出现以下结果就说明安装成功了 &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1715403-00317ef326504a12?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt; &lt;p&gt;用刚才注册的GitHub帐号登录完成后，可以看到： &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1715403-53c06db2a418de48?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt; &lt;p&gt;点击’New Repository’创建一个新的仓库&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1715403-fb97051317dc8064?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;这里写图片描述&quot; /&gt; 项目名称必须要填，描述可以不用，最后一个是否初始化README可以选，也可以后面自己新建。暂时先不选。 点击’create repository’ 完成创建。 &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1715403-98b000fc43f00b9c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;这里写图片描述&quot; /&gt; 先把框里面的路径复制下来，后面需要用到，现在在GitHub上的操作基本已经完成了。&lt;/p&gt; &lt;h2 id=&quot;第二步&quot;&gt;第二步&lt;/h2&gt; &lt;p&gt;先进入到项目根目录下&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd...</content>
 </entry>

 

 <entry>
   <title>将Android项目发布到本地Maven仓库</title>
   <link href="http://localhost:4000/Jekyll-%E5%8F%91%E5%B8%83Android%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%9C%AC%E5%9C%B0Maven%E4%BB%93%E5%BA%93"/>
   <id>http://localhost:4000/Jekyll-发布Android项目到本地Maven仓库</id>
   <updated>2017-03-03T09:58:00+08:00</updated>
   <content type="html">&lt;h1 id=&quot;说明&quot;&gt;说明&lt;/h1&gt; &lt;p&gt;android studio 中我们可以通过在gradle.build中添加配置来导入引用库，如：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile 'com.kcode.github.pubutils:androidLib:0.0.1' &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;通过这个可以看出’com.kcode.github.pubutils:androidLib:0.0.1’由三部分组成，分别是Maven中的&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.kcode.github.pubutils&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;androidLib&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;aar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;...</content>
 </entry>

 

 <entry>
   <title>Android 自定义轮播图片控件使用</title>
   <link href="http://localhost:4000/Jekyll-Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%89%87%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8"/>
   <id>http://localhost:4000/Jekyll-Android 自定义轮播图片控件使用</id>
   <updated>2017-03-03T09:56:00+08:00</updated>
   <content type="html">&lt;h3 id=&quot;效果图&quot;&gt;效果图&lt;/h3&gt; &lt;p&gt;直接先上效果图。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1715403-cbf7c309b85e2770.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;轮播图.gif&quot; /&gt;&lt;/p&gt; &lt;p&gt;###实现原理 本篇主要讲如何在项目中引用。具体实现请查看&lt;a href=&quot;http://www.jianshu.com/p/5c47cb6afe0f&quot;&gt;Android 自定义轮播图&lt;/a&gt;&lt;/p&gt; &lt;p&gt;###添加依赖 在module的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;中添加：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;allprojects { repositories { jcenter() maven { url &quot;https://jitpack.io&quot; } } } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;在app的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;中添加:&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; compile 'com.github.fccaikai:AutoScrollViewPager:0.7.0', { exclude group: 'com.android.support', module: 'appcompat-v7' } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exclude group:...</content>
 </entry>

 

 <entry>
   <title>Android 自定义轮播图片控件</title>
   <link href="http://localhost:4000/Jekyll-Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%89%87%E6%8E%A7%E4%BB%B6"/>
   <id>http://localhost:4000/Jekyll-Android 自定义轮播图片控件</id>
   <updated>2017-03-03T09:56:00+08:00</updated>
   <content type="html">&lt;h3 id=&quot;效果图&quot;&gt;效果图&lt;/h3&gt; &lt;p&gt;直接先上效果图。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1715403-cbf7c309b85e2770.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;轮播图.gif&quot; /&gt;&lt;/p&gt; &lt;p&gt;###实现原理 要完成一个轮播图片，首先想到的应该是使用ViewPager来实现。ViewPager已经有了滑动的功能，我们只要让它自己滚动。再加上下方的小圆点就行了。所以我们本次的自定义控件就是由ViewPager和LinearLayout叠加起来组成的。&lt;/p&gt; &lt;p&gt;###难点&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;如何循环滚动&lt;/p&gt; &lt;p&gt;首先我们的轮播图是可以一直滚动下去的。那我们在Adapter中设置的大小就需要无限大（这里我们取&lt;code class=&quot;highlighter-rouge&quot;&gt;Integer.MAX_VALUE&lt;/code&gt;的值）。假设我们有三张图片。要在第三张图片时，继续滚动到第一张。其实就是把第四个位置的&lt;code class=&quot;highlighter-rouge&quot;&gt;ImageView&lt;/code&gt;加载的图片地址为第一张的。这里我们用&lt;code class=&quot;highlighter-rouge&quot;&gt;模运算&lt;/code&gt;来处理。如：第四张时，3%3=0（Adapter是从0开始，3代表第四张）。我们就能拿到第1个位置的图片地址。具体实现步骤如下：&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;###创建一个自定义的ViewPager 先上完整的代码&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.kcode.autoscrollviewpager.view; import android.content.Context; import android.os.Message; import android.support.v4.view.ViewPager; import android.util.AttributeSet; import android.util.Log; import android.view.MotionEvent; import java.util.Timer; import java.util.TimerTask; /** * Created by caik on 2016/10/10. */ public...</content>
 </entry>

 

 <entry>
   <title>Realm for Android</title>
   <link href="http://localhost:4000/Jekyll-Realm-for-Android"/>
   <id>http://localhost:4000/Jekyll-Realm for Android</id>
   <updated>2017-03-03T09:53:00+08:00</updated>
   <content type="html">&lt;p&gt;##简介&lt;/p&gt; &lt;p&gt;realm是一个跨平台移动数据库引擎，支持iOS、OS X（Objective-C和Swift）、Android以及React Native。根据官网的介绍来说，是比Sqlite存储更加快读、高效。现在来的介绍一下realm环境的配置以及简单的使用。&lt;/p&gt; &lt;p&gt;官网：&lt;a href=&quot;https://realm.io&quot;&gt;realm&lt;/a&gt; github:&lt;a href=&quot;https://github.com/realm/realm-java&quot;&gt;realm-java&lt;/a&gt; 官方教程：&lt;a href=&quot;https://realm.io/docs/java/latest/&quot;&gt;realm docs&lt;/a&gt;&lt;/p&gt; &lt;p&gt;##Realm使用 ###集成&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;一&lt;/p&gt; &lt;p&gt;在Project目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;中做一下修改：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; buildscript { repositories { jcenter() } dependencies { classpath 'com.android.tools.build:gradle:2.2.1' classpath &quot;io.realm:realm-gradle-plugin:2.2.0&quot; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle...</content>
 </entry>

 

 <entry>
   <title>使用DialogFragment实现底部弹出框</title>
   <link href="http://localhost:4000/Jekyll-%E4%BD%BF%E7%94%A8DialogFragment%E5%AE%9E%E7%8E%B0%E5%BA%95%E9%83%A8%E5%BC%B9%E5%87%BA%E6%A1%86"/>
   <id>http://localhost:4000/Jekyll-使用DialogFragment实现底部弹出框</id>
   <updated>2017-03-03T09:49:00+08:00</updated>
   <content type="html">&lt;h2 id=&quot;效果图&quot;&gt;效果图&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1715403-eb61f9cb865d44b4.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;device-2016-09-25-174226.gif&quot; /&gt;&lt;/p&gt; &lt;p&gt;##实现 &lt;a href=&quot;https://developer.android.com/reference/android/app/DialogFragment.html&quot;&gt;DialogFragment&lt;/a&gt;是3.0之后提供的一个弹出框实现类。使用DialogFragment的好处是能够更好的控制其生命周期。&lt;/p&gt; &lt;p&gt;###创建一个DialogFragment&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class BottomDialog extends DialogFragment { public static BottomDialog newInstance() { Bundle args = new Bundle(); BottomDialog fragment = new BottomDialog(); fragment.setArguments(args); return fragment; } @Override public void onStart() { super.onStart(); Window window = getDialog().getWindow(); WindowManager.LayoutParams params =...</content>
 </entry>

 

 <entry>
   <title>使用BottomSheet实现底部弹出框</title>
   <link href="http://localhost:4000/Jekyll-%E4%BD%BF%E7%94%A8Bottom-Sheet%E5%AE%9E%E7%8E%B0%E5%BA%95%E9%83%A8%E5%BC%B9%E5%87%BA%E6%A1%86"/>
   <id>http://localhost:4000/Jekyll-使用Bottom Sheet实现底部弹出框</id>
   <updated>2017-03-03T09:49:00+08:00</updated>
   <content type="html">&lt;p&gt;上一篇文章介绍了&lt;a href=&quot;http://www.jianshu.com/p/8d420b668eda&quot;&gt;使用DialogFragment实现弹底部菜单&lt;/a&gt;，这次我们使用android design library 中的&lt;a href=&quot;https://material.google.com/components/bottom-sheets.html&quot;&gt;Bottom Sheet&lt;/a&gt;来实现。 Bottom Sheet是在support library 23.2之后提供的一个新控件，也就是需要用6.0以上的SDK进行编译才可以使用此控件，6.0以下的可以参考上一篇文章，使用&lt;a href=&quot;http://www.jianshu.com/p/8d420b668eda&quot;&gt;DialogFragment&lt;/a&gt;实现。 先上效果图： &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1715403-40bbfdc3cb23236c.gif?imageMogr2/auto-orient/strip/480&quot; alt=&quot;device-2016-09-29-091428.gif&quot; /&gt; 下面我们来一步一步使用Bottom Sheet实现底部弹出框的效果。&lt;/p&gt; &lt;h3 id=&quot;添加依赖&quot;&gt;添加依赖&lt;/h3&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile 'com.android.support:design:24.2.0' &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;这里我使用的是24.2.0版本，但是只要是23.2.0+的版本就可以了&lt;/p&gt; &lt;p&gt;###创建一个layout&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;android.support.design.widget.CoordinatorLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt; &lt;span...</content>
 </entry>

 

 <entry>
   <title>Android 运行时权限处理</title>
   <link href="http://localhost:4000/Jekyll-Android-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86"/>
   <id>http://localhost:4000/Jekyll-Android 运行时权限处理</id>
   <updated>2017-03-03T09:31:00+08:00</updated>
   <content type="html">&lt;h3 id=&quot;android-运行时权限处理&quot;&gt;Android 运行时权限处理&lt;/h3&gt; &lt;h4 id=&quot;描述&quot;&gt;描述&lt;/h4&gt; &lt;p&gt;从Android 6.0（API级别23）开始，用户开始在应用运行时向其授予权限，而不是在应用安装时授予。此方法可以简化应用安装过程，因为用户在安装或更新应用时不需要授予权限。它还让用户可以对应用的功能进行更多控制；例如，用户可以选择为相机应用提供相机访问权限，而不提供设备位置的访问权限。用户可以随时进入应用的“Settings”屏幕调用权限。具体介绍详见&lt;a href=&quot;https://developer.android.com/training/permissions/requesting.html&quot;&gt;官网介绍&lt;/a&gt;。&lt;/p&gt; &lt;h4 id=&quot;权限类别&quot;&gt;权限类别&lt;/h4&gt; &lt;p&gt;系统权限分为了两种类别：正常权限和危险权限。 正常权限：可以只要在&lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;中进行配置就可以了； 危险权限：除了在&lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;中进行配置，还需要在运行时进行权限的请求，也就是本文所需要讲述的内容。&lt;/p&gt; &lt;p&gt;可以通过以下命令行来查询危险权限&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ adb shell pm list permissions -d -g &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h3 id=&quot;检查权限&quot;&gt;检查权限&lt;/h3&gt; &lt;p&gt;当我们需要使用某一个权限时，我们要先检查一下，系统是否已经授予了我们这个权限。比如：当想调用系统相机时，需要去检查一下，是否有打开相机的权限。 使用&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/content/ContextCompat.html#checkSelfPermission(android.content.Context, java.lang.String)&quot;&gt;ContextCompat.checkSelfPermission()&lt;/a&gt;方法来检查是否具有某项权限。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int permissionCheck = ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.WRITE_CALENDAR); if(permissionCheck == PackageManager.PERMISSION_GRANTED){ //具有此权限 } &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;当返回值permissionCheck等于&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#PERMISSION_GRANTED&quot;&gt;PackageManager.PERMISSION_GRANTED&lt;/a&gt;时，表示用户具有此权限，可以继续打开相机；返回值等于&lt;a...</content>
 </entry>

 

 <entry>
   <title>Jekyll GitPage个人博客搭建</title>
   <link href="http://localhost:4000/Jekyll-GitPage%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA"/>
   <id>http://localhost:4000/Jekyll-GitPage个人博客搭建</id>
   <updated>2017-03-02T15:37:27+08:00</updated>
   <content type="html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your...</content>
 </entry>

 

</feed>